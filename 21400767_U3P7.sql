--21400767_U3P7.SQL
--PRACTICA 7
--UNIDAD 3
--AUTOR: RAMSES ROJAS AGUILAR
--21400767
--BREVE DESCRIPCIÓN


--1) CREAR FILEGROUPS
	ALTER DATABASE NorthwindParticionada
	ADD FILEGROUP FILE1to166;

	ALTER DATABASE NorthwindParticionada
	ADD FILEGROUP FILE167to333;

	ALTER DATABASE NorthwindParticionada
	ADD FILEGROUP FILE334to500;

	ALTER DATABASE NorthwindParticionada
	ADD FILEGROUP FILE501to667;

	ALTER DATABASE NorthwindParticionada
	ADD FILEGROUP FILE668to830;

--2) CREAR LOS DATAFILES
	ALTER DATABASE NorthwindParticionada
	ADD FILE (
	NAME = 'Particion166.ndf',
	filename = 'C:\ABD2025\DISCO1\Particion166.ndf'
	) TO FILEGROUP FILE1to166;

	ALTER DATABASE NorthwindParticionada
	ADD FILE (
	NAME = 'Particion333.ndf',
	filename = 'C:\ABD2025\DISCO2\Particion333.ndf'
	) TO FILEGROUP FILE167to333;

	ALTER DATABASE NorthwindParticionada
	ADD FILE (
	NAME = 'Particion500.ndf',
	filename = 'C:\ABD2025\DISCO3\Particion500.ndf' 
	) TO FILEGROUP FILE334to500;

	ALTER DATABASE NorthwindParticionada
	ADD FILE (
	NAME = 'Particion667.ndf',
	filename = 'C:\ABD2025\DISCO4\Particion667.ndf'
	) TO FILEGROUP FILE501to667;

	ALTER DATABASE NorthwindParticionada
	ADD FILE (
	NAME = 'Particion830.ndf',
	filename = 'C:\ABD2025\DISCO5\Particion830.ndf' 
	) TO FILEGROUP FILE668to830;

	--CREAR FUNCION DE PARTICION 
	-- RANGOS POR ORDERID 
	--10248 - 10600) 
	--10601 - 10800
	--10801 - 10900
	--10901 - 10999
	--11000 ->
	USE NorthwindParticionada;

	--POR IZQUIERDA (LA QUE USÉ)
	CREATE PARTITION FUNCTION f_partitionOrdersId(int)
	as RANGE LEFT FOR VALUES (10600, 10800, 10900, 10999);

	--POR DERECHA
	CREATE PARTITION FUNCTION f_partitionOrdersIDright(int)
	as RANGE RIGHT FOR VALUES (10601, 10801, 10901, 1100)

	--ESQUEMA DE PARTICION
	CREATE PARTITION SCHEME SchemePartOrderID 
	AS PARTITION f_partitionOrdersId
	TO (FILE1to166, FILE167to333, FILE334to500, FILE501to667,FILE668to830);

	--5. CREAR EL INDICE CLUSTEREADO Y ASIGNAR EL ESQUEMA
	exec sp_helpindex orders
	SELECT 
    CONSTRAINT_NAME,
    CONSTRAINT_TYPE
	FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS
	WHERE TABLE_NAME = 'Orders';



	--TAREA QUITAR EL CONSTRAINT DE FORIGN KEY DE ORDERDETAILS A LA TABLA ORDERS
	ALTER TABLE [order details]
	DROP CONSTRAINT FK_Order_Details_Orders
	
	-- QUITAR EL CONSTRAINT DE PRIMARY KEY DE ORDERS
	ALTER TABLE orders
	DROP CONSTRAINT PK_Orders

	-- CERAR EL INDICE CLUSTEREDAO Y ASIGNAR EL ESQUEMA 
	CREATE CLUSTERED INDEX INX_PARTORDERID
	 ON Orders (OrderId)
	 ON SchemePartOrderID (OrderId);

	-- Y NONCLOSTERED PARA LA LLAVE PRIMARIA
	ALTER TABLE Orders
	ADD CONSTRAINT PK_Orders_ID PRIMARY KEY NONCLUSTERED (OrderId);

	-- DEVOLVER LA FK A LA TABLA HIJA
	ALTER TABLE [Order Details]
	ADD CONSTRAINT FK_Order_Details_Order FOREIGN KEY (OrderID) REFERENCES Orders(OrderID);

	--SELECT COUNT WHERE ORDER ID EN RANGOS PARA SABER CUANTOS DEBE DE HABER EN CADA PARTICION

	SELECT COUNT(*) AS PRIMERA FROM Orders
	WHERE OrderID  <= 10600;

	SELECT COUNT(*) AS SEGUNDA FROM Orders
	WHERE OrderID between 10601 and 10800;

	SELECT COUNT(*) AS TERCERA FROM Orders
	WHERE OrderID between 10801 and 10900;

	SELECT COUNT(*) AS CUARTA FROM Orders
	WHERE OrderID BETWEEN 10901 AND 10999
	
	SELECT COUNT(*) AS QUINTA FROM Orders
	WHERE OrderID > 10999 

	--CONSULTAR LOS FILEGROUPS DE LA BASE DE DATOS
	SELECT name as AvailableFilegroups
	from sys.filegroups
	where type = 'FG'

	--CONSULTAR LOS DATAFILES DE LA BASE DE DATOS
	SELECT name as [FileName],
	physical_name as [FILEPATH]
	from sys.database_files
	where type_desc = 'ROWS'

--6. VERIFICAR MIS PARTICIONES
SELECT p.partition_number AS NUm_partition,
f.name as NOmbre, p.rows as Registros from sys.partitions p
inner join sys.destination_data_spaces dds
on p.partition_number = dds.destination_id
inner join sys.filegroups f
on dds.data_space_id = f.data_space_id
where OBJECT_NAME(object_id) = 'Orders'
and p.index_id = 1;

--7. INSERTAR Y VERIFICAR (SE IRÁ A LA PARTICOIN 5)
INSERT INTO Orders(CustomerID, EmployeeID, ShipVia, OrderDate, RequiredDate, ShippedDate)
values('Blaus', 7, 3, GETDATE(), GETDATE(), GETDATE());
	